-------------------------------------------------------Object class----------------------------------
methods : 

---------------------hashCode()---------------------
Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by HashMap.
The general contract of hashCode is:

1) Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons 
on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application.

2) If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result.
3) It is not required that if two objects are unequal according to the equals(java.lang.Object) method, then calling the hashCode method on each of the two objects must produce distinct 
integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables.


As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the JavaTM programming language.)

-----------------------------------hashCode-----------------------------

-----------------------------------------equals----------------------------

Indicates whether some other object is "equal to" this one.
The equals method implements an equivalence relation on non-null object references:

1) It is reflexive: for any non-null reference value x, x.equals(x) should return true.
2) It is symmetric: for any non-null reference values x and y, x.equals(y) should return true if and only if y.equals(x) returns true.
3) It is transitive: for any non-null reference values x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true.
4) It is consistent: for any non-null reference values x and y, multiple invocations of x.equals(y) consistently return true or consistently return false, provided no information used in equals comparisons on the objects is modified.
5) For any non-null reference value x, x.equals(null) should return false.
6) The equals method for class Object implements the most discriminating possible equivalence relation on objects; that is, for any non-null reference values x and y, this method returns true if and only if x and y refer to the same object (x == y has the value true).

Note that it is generally necessary to override the hashCode method whenever this method is overridden, so as to maintain the general contract for the hashCode method, which states that equal objects must have equal hash codes.

---------------------------------equals---------------------



----------------------------------------------Object class------------------------------------

HotSpot is the Sun's(now Oracle's ) implementation of JVM

http://docs.oracle.com/javase/specs/jls/se7/html/jls-12.html#jls-12.3

--------------------------------------------JVM(loading,linking and initializing)-------------------------


Array classes are not loaded by class loaders, they are created by JVM directly.

Loading refers to finding the .class file of a class or interface with particulate name and creating an on ojbect of
class Class to represent that class or interface.

https://www.artima.com/insidejvm/ed2/jvm5.html


--------------------------------multithreading-----------------------------------------

visibility problem : if a variable is non-volatile and one thread updates its value, it might happen the thread writes
that in its CPU's cache for performance reasons and not update the value in the main memory. If any other thread reads
the value from main memory, it wont get the updated value. This problem of not knowing when a thread will update a value
in the main memory is called visibility problem.


volatile : declaring a variable as volatile, its updated value will be directly written to the main memory.

When a thread writes to a volatile variable, then not just the volatile variable itself is written to main memory. Also all other variables changed 
by the thread before writing to the volatile variable are also flushed to main memory. When a thread reads a volatile variable it will also read all 
other variables from main memory which were flushed to main memory together with the volatile variable.

Look at this example:

Thread A:
    sharedObject.nonVolatile = 123;
    sharedObject.counter     = sharedObject.counter + 1;

Thread B:
    int counter     = sharedObject.counter;
    int nonVolatile = sharedObject.nonVolatile;
Since Thread A writes the non-volatile variable sharedObject.nonVolatile before writing to the volatile sharedObject.counter, then both sharedObject.nonVolatile and sharedObject.counter 
are written to main memory when Thread A writes to sharedObject.counter (the volatile variable).

Since Thread B starts by reading the volatile sharedObject.counter, then both the sharedObject.counter and sharedObject.nonVolatile are read from main memory into the CPU cache used by 
Thread B. By the time Thread B reads sharedObject.nonVolatile it will see the value written by Thread A.

As I have mentioned earlier, if two threads are both reading and writing to a shared variable, then using the volatile keyword for that is not enough. You need to use a synchronized in 
that case to guarantee that the reading and writing of the variable is atomic. Reading or writing a volatile variable does not block threads reading or writing. For this to happen you 
must use the synchronized keyword around critical sections


The problem with calling wait() and notify() on the empty string, or any other constant string is, that the JVM/Compiler internally translates constant strings into the same object. That means, 
that even if you have two different MyWaitNotify instances, they both reference the same empty string instance. This also means that threads calling doWait() on the first MyWaitNotify instance risk 
being awakened by doNotify() calls on the second MyWaitNotify instance.

deadlocks: http://javajee.com/deadlock-in-operating-systems 

conditions for deadlock:
1) mutual exclusion : atleast one resourse which is non-shareable.
2) non-preemptive resources.
3) hold and wait : process should be able to hold a resource and wait for the another. if only every can wait for a
resource without holding another resource, deadlock will not happen. 
4) circular wait. 

--------------------------------multithreading-----------------------------------------

Default access is more restrictive. When a derived class overrides a base class function, more restrictive access can’t
be given to the overridden function.


In case of method overloading, the most specific method is chosen at compile time. As ‘java.lang.String’ is a more specific type than 
‘java.lang.Object’. In this case the method which takes ‘String’ as a parameter is choosen


// Main.java
public class Main
{
    public static void gfg(String s)
    {    
        System.out.println("String");
    }
    public static void gfg(Object o)
    {
        System.out.println("Object");
    }
    public static void gfg(Integer i)
    {
        System.out.println("Integer");
    }
 
    public static void main(String args[])
    {
        gfg(null);
    }
} //end class
Output:

Compile Error at line 19.
Explanation: In this case of method Overloading, the most specific method is choosen at compile time.
As ‘java.lang.String’ and ‘java.lang.Integer’ is a more specific type than ‘java.lang.Object’,but 
between ‘java.lang.String’ and ‘java.lang.Integer’ none is more specific.
In this case the Java is unable to decide which method to call


int x = 6;
long y = 9;

x += y;//this will not give CT error. the result will be casted to int.
x = y;//this will give CT error.


Thread cannot be started twice.


String s = "Mohit";
String t = "Mohit"; // s and t will give s == t as true;
String z = new String("Mohit");//s and z will give false;
System.out.println(s == z)
